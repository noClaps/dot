package crypt

import (
	"os"
	"os/exec"
	"path/filepath"
	"runtime"
	"strings"

	"github.com/pol-rivero/doot/lib/common/log"
	. "github.com/pol-rivero/doot/lib/types"
)

var (
	gitCryptKeyPath   = RelativePath(filepath.Join(".git", "git-crypt", "keys", "default"))
	gitAttributesPath = RelativePath(filepath.Join(".git", "info", "attributes"))
)

func getGitAttributesContent(withPadding bool) string {
	content := `# Auto-generated by 'doot crypt init'. Do not edit.
**/*.doot-crypt filter=git-crypt diff=git-crypt
**/*.doot-crypt.* filter=git-crypt diff=git-crypt
**/*.doot-crypt/** filter=git-crypt diff=git-crypt
**/*.doot-crypt.*/** filter=git-crypt diff=git-crypt
# End of 'doot crypt init'`
	if withPadding {
		content = "\n" + content + "\n"
	}
	if runtime.GOOS == "windows" {
		return strings.ReplaceAll(content, "\n", "\r\n")
	}
	return content
}

func ensureGitCryptInstalled() {
	if _, err := exec.LookPath("git-crypt"); err != nil {
		log.Fatal("git-crypt does not seem to be installed. Make sure it is available in your PATH.")
	}
}

func ensureGitCryptIsInitialized(dotfilesDir AbsolutePath) {
	if !GitCryptIsInitialized(dotfilesDir) {
		log.Fatal("Your repository (%s) is not initialized, run 'doot crypt init' first.", dotfilesDir)
	}
}

func GitCryptIsInitialized(dotfilesDir AbsolutePath) bool {
	return gitCryptKeyExists(dotfilesDir) && gitAttributesIsSet(dotfilesDir)
}

func gitCryptKeyExists(dotfilesDir AbsolutePath) bool {
	keyPath := dotfilesDir.JoinPath(gitCryptKeyPath)
	fileInfo, err := os.Stat(keyPath.Str())
	return err == nil && fileInfo.Mode().IsRegular()
}

func gitAttributesIsSet(dotfilesDir AbsolutePath) bool {
	attributesPath := dotfilesDir.JoinPath(gitAttributesPath)
	attributesContent, err := os.ReadFile(attributesPath.Str())
	if err != nil {
		return false
	}
	return strings.Contains(string(attributesContent), getGitAttributesContent(false))
}

func appendGitAttributes(dotfilesDir AbsolutePath) error {
	attributesPath := dotfilesDir.JoinPath(gitAttributesPath)
	content := []byte(getGitAttributesContent(true))
	return os.WriteFile(attributesPath.Str(), content, 0644)
}

func GetGitAttributesContentForTesting() string {
	return getGitAttributesContent(false)
}
